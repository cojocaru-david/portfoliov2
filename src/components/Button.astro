---
interface Props {
	href?: string;
    target?: string;
    variant?: string;
    disabled?: boolean;
    class?: string;
}

const { 
    href, 
    target, 
    variant, 
    disabled,
    class: className
} = Astro.props as Props;

let variantBtn = variant || 'primary';
switch (variant) {
    case 'primary':
        variantBtn = 'rounded-full bg-gradient-to-r from-[#B16CEA] to-[#FF5E69] text-white focus:ring-2 focus:ring-[#FF8A56] hover:shadow-xl transition duration-200';
        break;
    case 'secondary':
        variantBtn = 'text-sm md:text-base rounded-full dark:bg-white dark:text-neutral-900 bg-neutral-100 text-neutral-900 focus:ring-2 focus:ring-[#FF8A56] hover:shadow-xl transition duration-200 md:font-semibold';
        break;
    case 'outline':
        variantBtn = 'text-sm md:text-base rounded-full border-2 border-neutral-900 dark:border-neutral-100 dark:text-white dark:bg-transparent text-neutral-100 bg-transparent focus:ring-2 focus:ring-[#FF8A56] hover:shadow-xl transition duration-200 md:font-semibold text-neutral-900 dark:text-neutral-100';
        break;
    case 'orange':
        variantBtn = 'rounded-full bg-orange-900 text-white focus:ring-2 focus:ring-orange-600 hover:shadow-xl transition duration-200';
        break;
    default:
        variantBtn = 'rounded-full bg-gradient-to-r from-[#B16CEA] to-[#FF5E69] text-white focus:ring-2 focus:ring-[#FF8A56] hover:shadow-xl transition duration-200';
        break;
}
---
<a 
    href={href}
    target={target}
    class={`inline-block px-4 py-2 sm:px-4 sm:py-2 md:px-8 md:py-2 ${variantBtn} ${disabled ? 'cursor-not-allowed opacity-50' : 'hover:opacity-90'} ${className}`}
    {...(disabled ? { disabled: true } : {})}
>
    <slot />
</a>
